"""mapper pipeline

Author: Thomas Cokelaer
Affiliation: Institut Pasteur @ 2019

This pipeline is part of Sequana software (sequana.readthedocs.io)

snakemake -s mapper.rules --forceall --stats stats.txt --cores 4


"""
import sequana
from sequana import snaketools as sm
from sequana import sequana_data

# This must be defined before the include
configfile: "config.yaml"

exec(open(sequana.modules["bwa_mem_dynamic"], "r").read())

# A convenient manager
#
#
try:
    manager = sm.PipelineManager("mapper", config)
except:
    manager = sm.PipelineManager("mapper", config, fastq=False)

__data__input = manager.getrawdata()
__pipeline_name__ = "mapper"


reference_file = config['general']['reference_file']
annotation_file = config['general']['annotation_file']


if config['general']['mapper'] == "bwa":
    reference = config["general"]["reference_file"]
    """if not os.path.isfile(reference + ".bwt"):
        exec(open(sequana.modules["dynamic_copy"], "r").read())
        __copy_ref__input = reference
        __copy_ref__output = "reference/" + os.path.basename(reference)
        include: dynamic_copy("ref", manager)
        __bwa_mem_mapping__reference = __copy_ref__output
    else:
        __bwa_mem_mapping__reference = reference
    """
    __bwa_index_mapping__log = "common_logs/bwa_index.log"
    __bwa_mem_mapping__fastq = __data__input
    __bwa_mem_mapping__reference = reference_file
    __bwa_mem_mapping__bam = manager.getname("bwa_mem_mapping", ".sorted.bam")
    __bwa_mem_mapping__fai = __bwa_mem_mapping__reference + ".bwt"
    __bwa_mem_mapping__log = manager.getlogdir("bwa_mem_mapping")
    include: bwa_mem_dynamic("mapping", manager)

    __bamtools_stats__input = __bwa_mem_mapping__bam
elif config['general']['mapper'] == "minimap2":
    __minimap2__output = manager.getname("minimap2", ".sorted.bam")
    rule minimap2:
        input: __data__input
        output: __minimap2__output
        params:
            reference=config['general']['reference_file']
        shell:
            """
            minimap2 {params.reference} {input} -a | samtools view -b | bamtools sort -in - -out {output}
            """
    __bamtools_stats__input = __minimap2__output


# sample should be included at the end of the filename for the multiqc to work
__bamtools_stats__output = "{sample}/bamtools_stats/sequana_bamtools_stats_{sample}.txt"
rule bamtools_stats:
    input: __bamtools_stats__input
    output: __bamtools_stats__output
    shell:
        "bamtools stats -in {input} > {output}"




# Sequana_coverage analysis
if config["sequana_coverage"]["do"]:
    __samtools_depth__input = __bamtools_stats__output
    __samtools_depth__output = manager.getname("samtools_depth", ".bed")
    __samtools_depth__log = manager.getlogdir("samtools_depth")
    include: sm.modules["samtools_depth"]

    __sequana_coverage__bed = __samtools_depth__output
    __sequana_coverage__fasta = reference_file
    if config['sequena_coverage']['genbank']:
        __sequana_coverage__gbk = annotation_file
    else:
        __sequana_coverage__gbk = []
    config["sequana_coverage"]['k'] = config['sequana_coverage']['mixture_models']
    __sequana_coverage__csv = manager.getname("sequana_coverage", ".csv")
    __sequana_coverage__report_dir = __report_dir__
    __sequana_coverage__html = os.sep.join([
        __report_dir__, 'sequana_coverage.html'
    ])
    include: sm.modules["sequana_coverage"]
    expected_output.append(expand(__sequana_coverage__csv,
                                  sample=manager.samples))




__multiqc__input = expand(__bamtools_stats__output, sample=manager.samples)

__multiqc__input_dir = "."
__multiqc__logs = "multiqc/multiqc.log"
__multiqc__output = config['multiqc']['output_directory'] + "/multiqc_report.html"

rule multiqc:
    input: __multiqc__input
    output: __multiqc__output
    params:
        inputdir = ".",
        outdir="multiqc",
        config=sequana_data("multiqc_config.yaml", "../multiqc"),
        options = config["multiqc"]["options"] 
    shell:
        """
        multiqc {params.inputdir} -o {params.outdir} -c {params.config} {params.options} 2> multiqc/multiqc.log
        """

# Those rules takes a couple of seconds so no need for a cluster
localrules: multiqc


rule pipeline:
    input: expected_output + ["multiqc/multiqc_report.html"]

onsuccess:
    from sequana.snaketools import OnSuccessCleaner
    sc = OnSuccessCleaner()
    sc.files_to_remove.append("mapper.rules")
    #toremove = config["onsuccess"]["toclean"]
    sc.files_to_remove.extend(["schema.yaml", "mapper.sh", "multi_config.yaml"])
    sc.add_makefile()
    print("Once done, please clean up the directory using\n'make clean'")

    with open(__multiqc__output, "r") as fin:
        with open(__multiqc__output+"2", "w") as fout:
            line = fin.readline()
            while line:
                if """<a href="http://multiqc.info" target="_blank">""" in line:
                    line = fin.readline() # read the image
                    line = fin.readline() # read the ending </a> tag
                else:
                    fout.write(line)
                line = fin.readline() # read the next line
    shell("mv {} {}".format(__multiqc__output +"2", __multiqc__output))



onerror:
    print("An error occurred. See message above.")

